// https://code.visualstudio.com/docs/cpp/launch-json-reference
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "(gdb) Launch", // 配置名称，将会在启动配置的下拉菜单中显示
      "type": "cppdbg", // 配置类型，对于 C/C++ 可认为此处只能是 cppdbg，由 cpptools 提供；不同编程语言不同
      "request": "launch", // 可以为 launch（启动）或 attach（附加）
      "program": "${fileDirname}/${fileBasenameNoExtension}.exe", // 将要进行调试的程序的路径
      "args": [], // 程序调试时传递给程序的命令行参数，一般设为空
      "stopAtEntry": false, // 设为 true 时程序将暂停在程序入口处，相当于在 main 上打断点
      "cwd": "${workspaceFolder}", // 调试程序时的工作目录，此为工作区文件夹；改成 ${fileDirname} 可变为文件所在目录
      "environment": [], // 环境变量
      "externalConsole": true, // 使用单独的 cmd 窗口，与其它 IDE 一致；为 false 时使用内置终端
      "internalConsoleOptions": "neverOpen", // 如果不设为 neverOpen，调试时会跳到“调试控制台”选项卡，你应该不需要对 gdb 手动输命令吧？
      "MIMode": "gdb", // 指定连接的调试器，可以为 gdb 或 lldb。但我没试过 lldb
      "miDebuggerPath": "gdb.exe", // 调试器路径，Windows 下后缀不能省略，Linux 下则不要
      "setupCommands": [
        {
          // 模板自带，好像可以更好地显示 STL 容器的内容，具体作用自行 Google
          "description": "Enable pretty-printing for gdb",
          "text": "-enable-pretty-printing",
          "ignoreFailures": false
        }
      ],
      "preLaunchTask": "Compile" // 调试前执行的任务，一般为编译程序。与tasks.json的label相对应
    }
  ]
}
