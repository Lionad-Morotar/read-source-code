// https://code.visualstudio.com/docs/editor/tasks
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Compile", // 任务名称，与 launch.json 的 preLaunchTask 相对应
      "command": "g++", // 要使用的编译器，C++ 用 g++，C 用 gcc
      "args": [
        "${file}",
        "-o", // 指定输出文件名，不加该参数则默认输出 a.exe，Linux 下默认 a.out
        "${fileDirname}/${fileBasenameNoExtension}.exe",
        "-g", // 生成和调试有关的信息
        // "-m64", // 不知为何有时会生成 16 位程序而无法运行，此条可强制生成64位的
        "-Wall", // 开启额外警告
        "-static-libgcc", // 静态链接 libgcc，一般都会加上
        "-fexec-charset=GBK", // 生成的程序使用 GBK 编码，不加这条会导致 Win 下输出中文乱码；繁体系统改成 BIG5
        "-D__USE_MINGW_ANSI_STDIO", // 用 MinGW 写 C 时留着，否则不需要，用于支持 printf 的 %zd 和 %Lf 等
      ], // 编译的命令，其实相当于 VSC 帮你在终端中输了这些东西
      "type": "process", // process 是把预定义变量和转义解析后直接全部传给 command；shell 相当于先打开 shell 再输入命令，所以 args 还会经过 shell 再解析一遍
      "group": {
        "kind": "build",
        "isDefault": true // 不为 true 时 ctrl shift B 就要手动选择了
      },
      "presentation": {
        "echo": true,
        "reveal": "always", // 执行任务时是否跳转到终端面板，可以为 always，silent，never。具体参见VSC的文档，即使设为 never，手动点进去还是可以看到
        "focus": false, // 设为true后可以使执行 task 时焦点聚集在终端，但对编译C/C++来说，设为true没有意义
        "panel": "shared" // 不同的文件的编译信息共享一个终端面板
      },
      "problemMatcher": "$gcc" // 捕捉编译时终端里的报错信息到问题面板中，修改代码后需要重新编译才会再次触发
      // 本来有 Lint，再开 problemMatcher 就有双重报错，但 MinGW 的 Lint 效果实在太差了；用 Clangd 可以注释掉
    }
  ]
}